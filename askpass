#!/usr/bin/env python3
"""
Askpass helper with GUI confirmation dialog and enhanced security
"""

import sys
import os
import subprocess
import time
import syslog
import socket
import tempfile

# GUI imports
try:
    import tkinter as tk
    from tkinter import messagebox
    HAS_GUI = True
except ImportError:
    HAS_GUI = False

# Alternative GUI with GTK
try:
    import gi
    gi.require_version('Gtk', '3.0')
    from gi.repository import Gtk, GLib
    HAS_GTK = True
except ImportError:
    HAS_GTK = False

# Try keyring as backup
try:
    import keyring
    HAS_KEYRING = True
except ImportError:
    HAS_KEYRING = False

SERVICE_NAME = "sudo-askpass"
USERNAME = "sudo"
SSH_ENCRYPTED_FILE = os.path.expanduser("~/.sudo_askpass.ssh")
CONFIG_FILE = os.path.expanduser("~/.config/secure-askpass/config.json")
RATE_LIMIT_FILE = os.path.expanduser("~/.config/secure-askpass/rate_limit.json")
AUDIT_LOG_FILE = os.path.expanduser("~/.config/secure-askpass/audit.log")

# SSH key types to try in order of preference
SSH_KEY_TYPES = [
    ("~/.ssh/id_ed25519", "Ed25519"),
    ("~/.ssh/id_ecdsa", "ECDSA"),
    ("~/.ssh/id_rsa", "RSA"),
    ("~/.ssh/id_dsa", "DSA")
]

def find_ssh_key():
    """Find the first available SSH private key"""
    for key_path, key_type in SSH_KEY_TYPES:
        full_path = os.path.expanduser(key_path)
        if os.path.exists(full_path):
            return full_path, key_type
    return None, None

SSH_KEY, SSH_KEY_TYPE = find_ssh_key()

# Default security configurations
DEFAULT_CONFIG = {
    "require_user_confirmation": True,
    "allowed_paths": ["/home/ian/", "/tmp/"],
    "expiration_hours": 24,
    "allowed_processes": ["sudo", "claude-code", "code", "bash", "sh"],
    "max_attempts_per_hour": 30,
    "lockout_minutes": 15
}

# Load configuration
def load_config():
    config = DEFAULT_CONFIG.copy()
    
    # Try to load from user config directory first
    if os.path.exists(CONFIG_FILE):
        try:
            import json
            with open(CONFIG_FILE, 'r') as f:
                user_config = json.load(f)
                config.update(user_config)
        except:
            pass
    
    # Try to load from script directory
    local_config = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'askpass-config.json')
    if os.path.exists(local_config):
        try:
            import json
            with open(local_config, 'r') as f:
                user_config = json.load(f)
                config.update(user_config)
        except:
            pass
    
    return config

config = load_config()
ALLOWED_PATHS = config['allowed_paths']
EXPIRATION_HOURS = config['expiration_hours']
ALLOWED_PARENT_PROCESSES = config['allowed_processes']
REQUIRE_USER_CONFIRMATION = config['require_user_confirmation']
MAX_ATTEMPTS_PER_HOUR = config['max_attempts_per_hour']
LOCKOUT_MINUTES = config['lockout_minutes']

def check_rate_limit():
    """Check if rate limit has been exceeded"""
    import json
    from datetime import datetime, timedelta
    
    try:
        # Load rate limit data
        if os.path.exists(RATE_LIMIT_FILE):
            with open(RATE_LIMIT_FILE, 'r') as f:
                rate_data = json.load(f)
        else:
            rate_data = {"attempts": [], "lockout_until": None}
        
        now = datetime.now()
        
        # Check if locked out
        if rate_data.get("lockout_until"):
            lockout_until = datetime.fromisoformat(rate_data["lockout_until"])
            if now < lockout_until:
                remaining = int((lockout_until - now).total_seconds() / 60)
                syslog.syslog(syslog.LOG_WARNING, f"Rate limit lockout in effect for {remaining} more minutes")
                return False
            else:
                # Lockout expired
                rate_data["lockout_until"] = None
        
        # Clean old attempts (older than 1 hour)
        one_hour_ago = now - timedelta(hours=1)
        rate_data["attempts"] = [
            attempt for attempt in rate_data["attempts"]
            if datetime.fromisoformat(attempt) > one_hour_ago
        ]
        
        # Check attempt count
        if len(rate_data["attempts"]) >= MAX_ATTEMPTS_PER_HOUR:
            # Apply lockout
            lockout_until = now + timedelta(minutes=LOCKOUT_MINUTES)
            rate_data["lockout_until"] = lockout_until.isoformat()
            syslog.syslog(syslog.LOG_WARNING, f"Rate limit exceeded, locking out for {LOCKOUT_MINUTES} minutes")
            
            # Save rate limit data
            os.makedirs(os.path.dirname(RATE_LIMIT_FILE), exist_ok=True)
            with open(RATE_LIMIT_FILE, 'w') as f:
                json.dump(rate_data, f)
            
            return False
        
        # Record this attempt
        rate_data["attempts"].append(now.isoformat())
        
        # Save rate limit data
        os.makedirs(os.path.dirname(RATE_LIMIT_FILE), exist_ok=True)
        with open(RATE_LIMIT_FILE, 'w') as f:
            json.dump(rate_data, f)
        
        return True
        
    except Exception as e:
        syslog.syslog(syslog.LOG_ERR, f"Rate limit check failed: {e}")
        # Fail open to avoid lockout due to errors
        return True

def get_sudo_command():
    """Try to determine what command sudo is trying to run"""
    try:
        # Get parent process command line
        ppid = os.getppid()
        with open(f'/proc/{ppid}/cmdline', 'r') as f:
            cmdline = f.read().replace('\0', ' ').strip()
            # Extract the actual command after sudo flags
            parts = cmdline.split()
            if 'sudo' in parts[0]:
                # Find the actual command (skip sudo and its flags)
                for i, part in enumerate(parts):
                    if not part.startswith('-') and part != 'sudo':
                        return ' '.join(parts[i:])
        return "Unknown command"
    except:
        return "Unknown command"

def show_confirmation_dialog():
    """Show GUI confirmation dialog for sudo access"""
    command = get_sudo_command()
    hostname = socket.gethostname()
    user = os.environ.get('USER', 'unknown')
    
    # Try Tkinter first
    if HAS_GUI and 'DISPLAY' in os.environ:
        try:
            root = tk.Tk()
            root.withdraw()  # Hide the main window
            root.attributes('-topmost', True)  # Bring to front
            
            # Create dialog message
            message = f"Administrator privileges requested\n\n"
            message += f"User: {user}\n"
            message += f"Host: {hostname}\n"
            message += f"Command: {command}\n\n"
            message += "Do you want to allow this?"
            
            result = messagebox.askyesno(
                "Sudo Authentication Required",
                message,
                icon=messagebox.WARNING
            )
            root.destroy()
            return result
        except Exception as e:
            syslog.syslog(syslog.LOG_WARNING, f"Tkinter dialog failed: {e}")
    
    # Try GTK as fallback
    if HAS_GTK and 'DISPLAY' in os.environ:
        try:
            dialog = Gtk.MessageDialog(
                parent=None,
                modal=True,
                message_type=Gtk.MessageType.WARNING,
                buttons=Gtk.ButtonsType.YES_NO,
                text="Administrator privileges requested"
            )
            dialog.format_secondary_text(
                f"User: {user}\n"
                f"Host: {hostname}\n"
                f"Command: {command}\n\n"
                f"Do you want to allow this?"
            )
            dialog.set_keep_above(True)
            dialog.set_urgency_hint(True)
            
            response = dialog.run()
            dialog.destroy()
            return response == Gtk.ResponseType.YES
        except Exception as e:
            syslog.syslog(syslog.LOG_WARNING, f"GTK dialog failed: {e}")
    
    # Fallback to zenity if available
    if 'DISPLAY' in os.environ:
        try:
            message = f"Administrator privileges requested\\n\\n"
            message += f"User: {user}\\n"
            message += f"Host: {hostname}\\n"
            message += f"Command: {command}\\n\\n"
            message += "Do you want to allow this?"
            
            result = subprocess.run(
                ['zenity', '--question', '--title=Sudo Authentication Required',
                 f'--text={message}', '--width=400'],
                capture_output=True
            )
            return result.returncode == 0
        except:
            pass
    
    # If GUI is required but not available, deny by default
    if 'DISPLAY' not in os.environ:
        syslog.syslog(syslog.LOG_ERR, "No display available for confirmation dialog")
    return False

def check_security():
    """Perform security checks before retrieving password"""
    # 0. Rate limit check
    if not check_rate_limit():
        return False
    
    # 1. Path-based restriction
    cwd = os.getcwd()
    if not any(cwd.startswith(path) for path in ALLOWED_PATHS):
        syslog.syslog(syslog.LOG_WARNING, f"Askpass called from unauthorized path: {cwd}")
        return False
    
    # 2. Process validation
    try:
        ppid = os.getppid()
        proc_name = open(f'/proc/{ppid}/comm').read().strip()
        if proc_name not in ALLOWED_PARENT_PROCESSES:
            syslog.syslog(syslog.LOG_WARNING, f"Askpass called by unauthorized process: {proc_name}")
            return False
    except Exception:
        syslog.syslog(syslog.LOG_WARNING, "Could not determine parent process")
        return False
    
    # 3. Environment verification
    if not (os.getenv('SSH_AUTH_SOCK') or os.getenv('SSH_TTY') or os.getenv('TERM')):
        syslog.syslog(syslog.LOG_WARNING, "Askpass called without proper environment")
        return False
    
    # 4. Time-based expiration check
    if os.path.exists(SSH_ENCRYPTED_FILE):
        age = time.time() - os.path.getmtime(SSH_ENCRYPTED_FILE)
        if age > EXPIRATION_HOURS * 3600:
            syslog.syslog(syslog.LOG_INFO, f"Password expired after {EXPIRATION_HOURS} hours")
            try:
                os.remove(SSH_ENCRYPTED_FILE)
            except:
                pass
            return False
    
    # 5. User confirmation dialog (if enabled and GUI available)
    if REQUIRE_USER_CONFIRMATION:
        if not show_confirmation_dialog():
            syslog.syslog(syslog.LOG_WARNING, "User denied sudo access via dialog")
            return False
        syslog.syslog(syslog.LOG_INFO, "User approved sudo access via dialog")
    
    return True

def decrypt_with_ssh_key(encrypted_file):
    """Decrypt data using SSH private key"""
    if not SSH_KEY or not os.path.exists(SSH_KEY):
        return None
        
    try:
        with open(encrypted_file, 'rb') as f:
            encrypted_data = f.read()
        
        # First try direct decryption (for PKCS8 format keys)
        result = subprocess.run(
            ['openssl', 'pkeyutl', '-decrypt', '-inkey', SSH_KEY],
            input=encrypted_data,
            capture_output=True
        )
        
        if result.returncode == 0:
            return result.stdout.decode('utf-8').strip()
        
        # If that fails, convert key format first using secure temp file
        # Security fix: Use tempfile.NamedTemporaryFile to avoid predictable paths
        # and set restrictive permissions immediately to prevent race conditions
        with tempfile.NamedTemporaryFile(mode='w', suffix='.pem', delete=False) as temp_file:
            temp_pem = temp_file.name
            # Set restrictive permissions immediately
            os.chmod(temp_pem, 0o600)
        
        try:
            # Use appropriate conversion command based on key type
            if SSH_KEY_TYPE == "RSA":
                convert_cmd = ['openssl', 'rsa', '-in', SSH_KEY, '-out', temp_pem]
            elif SSH_KEY_TYPE == "DSA":
                convert_cmd = ['openssl', 'dsa', '-in', SSH_KEY, '-out', temp_pem]
            elif SSH_KEY_TYPE == "ECDSA":
                convert_cmd = ['openssl', 'ec', '-in', SSH_KEY, '-out', temp_pem]
            elif SSH_KEY_TYPE == "Ed25519":
                # Ed25519 keys are typically in PKCS8 format already
                # Try converting from OpenSSH format to PKCS8 PEM
                convert_cmd = ['openssl', 'pkey', '-in', SSH_KEY, '-out', temp_pem]
            else:
                # Generic attempt
                convert_cmd = ['openssl', 'pkey', '-in', SSH_KEY, '-out', temp_pem]
            
            convert_result = subprocess.run(convert_cmd, capture_output=True)
            
            if convert_result.returncode == 0:
                # Try decryption with converted key
                result = subprocess.run(
                    ['openssl', 'pkeyutl', '-decrypt', '-inkey', temp_pem],
                    input=encrypted_data,
                    capture_output=True
                )
                
                if result.returncode == 0:
                    return result.stdout.decode('utf-8').strip()
        finally:
            # Always clean up temp file
            if os.path.exists(temp_pem):
                os.remove(temp_pem)
    
    except Exception:
        pass
    
    return None

def validate_environment():
    """Validate SUDO_ASKPASS environment variable to prevent hijacking"""
    askpass_path = os.environ.get('SUDO_ASKPASS', '')
    if not askpass_path:
        return True  # Not using askpass
    
    # Get the real path of this script
    this_script = os.path.realpath(os.path.abspath(__file__))
    provided_script = os.path.realpath(os.path.abspath(askpass_path))
    
    if this_script != provided_script:
        syslog.syslog(syslog.LOG_CRIT, f"SUDO_ASKPASS hijacking detected! Expected: {this_script}, Got: {provided_script}")
        return False
    
    # Check file permissions (should not be writable by others)
    stats = os.stat(this_script)
    if stats.st_mode & 0o022:  # Check for group/other write permissions
        syslog.syslog(syslog.LOG_CRIT, f"SUDO_ASKPASS script has insecure permissions: {oct(stats.st_mode)}")
        return False
    
    return True

def secure_memory_clear(data):
    """Attempt to clear sensitive data from memory"""
    if isinstance(data, str):
        # Convert to mutable bytearray to overwrite
        as_bytes = bytearray(data, 'utf-8')
        for i in range(len(as_bytes)):
            as_bytes[i] = 0
    return None

def main():
    # Initialize syslog
    syslog.openlog("sudo-askpass")
    
    # Validate environment to prevent hijacking
    if not validate_environment():
        print("Error: Environment validation failed", file=sys.stderr)
        sys.exit(1)
    
    # Perform security checks (including user confirmation)
    if not check_security():
        print("Error: Security check failed", file=sys.stderr)
        syslog.syslog(syslog.LOG_ERR, "Security check failed")
        sys.exit(1)
    
    # Log successful security check
    try:
        ppid = os.getppid()
        proc_name = open(f'/proc/{ppid}/comm').read().strip()
        command = get_sudo_command()
        syslog.syslog(syslog.LOG_INFO, f"Askpass approved for {proc_name} (pid {ppid}): {command}")
        
        # Write to audit log
        from datetime import datetime
        audit_entry = {
            "timestamp": datetime.now().isoformat(),
            "pid": ppid,
            "process": proc_name,
            "command": command,
            "user": os.environ.get('USER', 'unknown'),
            "cwd": os.getcwd(),
            "status": "approved"
        }
        
        os.makedirs(os.path.dirname(AUDIT_LOG_FILE), exist_ok=True)
        with open(AUDIT_LOG_FILE, 'a') as f:
            import json
            f.write(json.dumps(audit_entry) + '\n')
    except:
        syslog.syslog(syslog.LOG_INFO, "Askpass called (process info unavailable)")
    
    password = None
    
    # Priority 1: SSH encrypted file
    if os.path.exists(SSH_ENCRYPTED_FILE):
        password = decrypt_with_ssh_key(SSH_ENCRYPTED_FILE)
        if password:
            print(password)
            key_info = f" ({SSH_KEY_TYPE} key)" if SSH_KEY_TYPE else ""
            syslog.syslog(syslog.LOG_INFO, f"Password retrieved via SSH encryption{key_info}")
            # Clear password from memory
            password = secure_memory_clear(password)
            return
    
    # Priority 2: Keyring
    if HAS_KEYRING and password is None:
        try:
            password = keyring.get_password(SERVICE_NAME, USERNAME)
            if password:
                print(password)
                syslog.syslog(syslog.LOG_INFO, "Password retrieved via keyring")
                # Clear password from memory
                password = secure_memory_clear(password)
                return
        except Exception:
            pass
    
    # No password found
    print("Error: No password found in secure storage", file=sys.stderr)
    print("Use 'askpass-manager set' to store the password securely", file=sys.stderr)
    syslog.syslog(syslog.LOG_ERR, "No password found in secure storage")
    sys.exit(1)

if __name__ == "__main__":
    main()